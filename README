1. First, we have to define our problem as a search problem:
        1.1: Initial State: P, an array of integers of size k, where k is the
        number of pancakes in our stack. Each position in the array corresponds
        to the distance from the top of the stack.
        1.2: Actions: Flip(P, s), which flips the top s pancakes on the stack 
        (assume p <= k) defined by P.
        1.3: Transition Model: Given a current state P = [p1, p2, p3, ..., pk],
        Flip(P, x) gives us a new state P = [p1, p2, ... pk, pk-1, ... px]
        1.4: Goal Test: If for all i in range [0,k-1], P[i] + 1 = P[i+1].
        1.5: Path Cost: Each flip we do costs us 1.
2. Backward Cost: Number of flips we've done, regardless of how MANY pancakes
were actually flipped at one time.
3. Forward Cost: As suggested by the article, our heuristic could be the number
of pancakes that are NOT adjacent to their ideal neighbor pancake (size +- 1).
4. See python file. 